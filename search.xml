<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>变量提升</title>
      <link href="/posts/3080460d.html"/>
      <url>/posts/3080460d.html</url>
      
        <content type="html"><![CDATA[<h1 id="JS中的变量提升"><a href="#JS中的变量提升" class="headerlink" title="JS中的变量提升"></a>JS中的变量提升</h1><blockquote><p><strong>变量提升</strong>：</p><ul><li>当 JS 编译代码时，当栈内存形成，JS代码自上而下执行之前，浏览器会把所有使用 <code>var 的变量声明</code>都被提升到<code>它们的函数/局部作用域的顶部</code>(<strong>如果在函数内部声明的话</strong>)，或者<code>提升到它们的全局作用域的顶部</code>(<strong>如果在函数外部声明的话</strong>)，而不管实际的声明是在哪里进行的。</li><li><code>函数声明</code>也会被提升，但是被提升到了最顶端，所以将位于所有变量声明之上。在<strong>编译阶段</strong><code>变量和函数声明</code>会被<code>放入内存</code>中，但是你在代码中编写它们的位置会保持不变。</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">//带var的只会提前的声明</span></span><br></pre></td></tr></table></figure><ul><li><code>声明declare</code>：var a;</li><li><code>定义defined</code>：a &#x3D; 10;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//带function会提前的声明加定义</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​这就是我们所说的“提升”。请记住，这种“提升”实际上并不发生在你的代码中，而只是一种比喻，与JavaScript编译器如何读取你的代码有关。记住当我们想到“提升”的时候，我们可以想象任何被提升的东西都会被移动到顶部，但是<strong>实际上你的代码并不会被修改</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>; <span class="comment">// let不允许变量提升</span></span><br></pre></td></tr></table></figure><h2 id="示例1：变量提升"><a href="#示例1：变量提升" class="headerlink" title="示例1：变量提升"></a>示例1：变量提升</h2><p>如果我们在<strong>全局作用域</strong>编写以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName);</span><br><span class="line"><span class="keyword">var</span> myName = <span class="string">&#x27;rainyjune&#x27;</span>;</span><br></pre></td></tr></table></figure><p>正确的答案是3：</p><blockquote><ol><li>Uncaught ReferenceError: myName is not defined</li><li>rainyjune</li><li><code>undefined</code></li></ol></blockquote><p>按照概念，其编译后的代码顺序如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myName <span class="comment">//顶端声明，提升到了最上面</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName); <span class="comment">//检测到变量 myName 存在，但是没有初始化或赋值</span></span><br><span class="line">myName = <span class="string">&#x27;rainyjune&#x27;</span>; <span class="comment">//变量赋值</span></span><br></pre></td></tr></table></figure><p>注意：<strong>唯一移动到顶部的是变量声明，而不是赋值给变量的实际值</strong></p><p>再看一个变量提升的例子，结合函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hey</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hey &#x27;</span> + myName);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hey</span>();</span><br><span class="line"><span class="keyword">var</span> myName = <span class="string">&#x27;rainyjune&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>这里调用 <code>hey()</code> 函数仍然返回 <code>undefined</code>，因为实际上 JavaScript 编译器会在执行时这样执行：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hey</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hey &#x27;</span> + myName);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myName;</span><br><span class="line"><span class="title function_">hey</span>(); <span class="comment">//所以当函数被调用时，它知道有一个变量叫做 myName，但是这个变量没有被赋予值。</span></span><br><span class="line">myName = <span class="string">&#x27;rainyjune&#x27;</span>;</span><br></pre></td></tr></table></figure><p>JavaScript 只提升声明，而不提升初始化。如果一个变量在访问之后再声明和初始化，那么此刻它的值是 undefined。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 返回 undefined，因为只有声明被提升，此阶段还没有初始化</span></span><br><span class="line"><span class="keyword">var</span> num; <span class="comment">// 声明</span></span><br><span class="line">num = <span class="number">6</span>; <span class="comment">// 初始化</span></span><br></pre></td></tr></table></figure><p>下面是一个只初始化的例子。这样不会发生提升，所以访问变量会抛出 ReferenceError 异常。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 抛出 ReferenceError 异常</span></span><br><span class="line">num = <span class="number">6</span>; <span class="comment">// 初始化，但未声明</span></span><br></pre></td></tr></table></figure><h2 id="示例2：函数提升"><a href="#示例2：函数提升" class="headerlink" title="示例2：函数提升"></a>示例2：函数提升</h2><p>下面代码中，虽然我们在编写函数之前先调用了它，代码还是正确执行了。这是因为函数声明发生了提升。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">catName</span>(<span class="string">&quot;Chloe&quot;</span>); <span class="comment">// &quot;My cat&#x27;s name is Chloe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">catName</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;My cat&#x27;s name is &quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>注意：但是使用函数表达式的形式，不允许提升</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fn</span>() <span class="comment">//这样就报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面试题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p><code>答案：5 5 5 3 3 3</code></p><p>分析过程：</p><ol><li><p>先进行变量提升：</p><ul><li><p><code>function fn()&#123;...&#125;</code> 形式有4个，都进行了提升和定义，但由于同名，最后1个覆盖了前面的3个</p></li><li><p>而<code>var fn=...</code>的函数表达式形式有1个,无法提升</p></li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn=&gt; 1</span><br><span class="line">=&gt; 2</span><br><span class="line">=&gt; 4</span><br><span class="line">=&gt; 5</span><br></pre></td></tr></table></figure></li></ol><p>​    </p><ol start="2"><li>然后开始自上而下执行js代码，一共调用了6次fn，以及一次函数表达式的声明和赋值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);&#125; <span class="comment">//提升</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">//5</span></span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">//5</span></span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">//5</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);&#125;; <span class="comment">// fn()&#123;console.log(3)&#125; 赋值给 fn</span></span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">//3</span></span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">//3</span></span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h2 id="Let，Const，不存在变量提升（ES6）"><a href="#Let，Const，不存在变量提升（ES6）" class="headerlink" title="Let，Const，不存在变量提升（ES6）"></a>Let，Const，不存在变量提升（ES6）</h2><h3 id="1-Let定义变量的特点"><a href="#1-Let定义变量的特点" class="headerlink" title="1.Let定义变量的特点"></a>1.<strong>Let定义变量的特点</strong></h3><blockquote><ul><li>执行上下文形成后，代码执行前，没有变量提升；</li><li>定义变量时，不再给window对象添加属性；</li><li>浏览器提前检查代码，let定义的变量不能与代码中其他变量、window属性<strong>重名</strong>，否则直接报错，此时代码还没有执行</li></ul></blockquote><h3 id="2-暂时性死区"><a href="#2-暂时性死区" class="headerlink" title="2.暂时性死区"></a>2.暂时性死区</h3><p>基于 let 创建变量，会把大部分｛｝当做一个块级作用域（类似函数的私有作用域），在这里会重新进行语法检测，看是否是基于新语法创建的变量，如果是就按新语法规范来解析。</p><p>在原有浏览器渲染机制下，基于typeof等逻辑符检测一个<code>未被声明过的变量，不会报错，返回undefined</code>；检测没有声明的变量却不报错，这就是老语法JS的暂时性死区！</p><p>比如，我a都没有声明过：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);<span class="comment">//undefined</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>;<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>ES6使用 let 解决了暂时性死区：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);<span class="comment">//报错；没有声明之前不能检测。</span></span><br><span class="line"><span class="keyword">let</span> a;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
